AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template to create a API Gateway

Parameters:
  CognitoStack:
    Type: String
    Description: stack name
  Route53DNSStack:
    Type: String
    Description: stack name
  ApiGatewayName:
    Type: String
    Description: API Gateway name
  AmazonAPIGatewayPushToCloudWatchLogs:
    Type: String
    Description: IAM Policy grant API Gateway permission to read and write logs to CloudWatch

Resources:
  ###############################################
  # API Gateway
  ###############################################

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref ApiGatewayName

  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoAuthorizer
      Type: COGNITO_USER_POOLS
      RestApiId: !Ref ApiGateway
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - Fn::ImportValue: !Sub "${CognitoStack}-CognitoUserPoolArn"

  ###############################################
  # API Gateway Logging
  ###############################################

  # https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html#set-up-access-logging-using-cloudformation

  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName:
        Fn::Join:
          - "-"
          - - !Ref ApiGateway
            - access-logs
      RetentionInDays: 1

  ApiGatewayAccessCloudWatchRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Ref AmazonAPIGatewayPushToCloudWatchLogs

  Account:
    Type: "AWS::ApiGateway::Account"
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayAccessCloudWatchRole.Arn

  ###############################################
  # Custom Domain
  ###############################################

  # https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-regional-api-custom-domain-create.html

  ApiGatewayDomain:
    Type: "AWS::ApiGateway::DomainName"
    Properties:
      DomainName:
        Fn::Sub:
          - "service.${DomainName}"
          - DomainName:
              Fn::ImportValue:
                Fn::Sub: "${Route53DNSStack}-DomainName"
      CertificateArn: !Ref RegionalCertificate
      EndpointConfiguration:
        Types:
          - REGIONAL
      SecurityPolicy: "TLS_1_2"

  RegionalCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName:
        Fn::Sub:
          - "service.${DomainName}"
          - DomainName:
              Fn::ImportValue:
                Fn::Sub: "${Route53DNSStack}-DomainName"
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName:
            Fn::Sub:
              - "service.${DomainName}"
              - DomainName:
                  Fn::ImportValue:
                    Fn::Sub: "${Route53DNSStack}-DomainName"
          HostedZoneId:
            Fn::ImportValue: !Sub "${Route53DNSStack}-HostedZoneId"
      Tags:
        - Key: "Purpose"
          Value: "Asm3"

  MyAliasRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      HostedZoneId:
        Fn::ImportValue: !Sub "${Route53DNSStack}-HostedZoneId"
      Name:
        Fn::Sub:
          - "service.${DomainName}"
          - DomainName:
              Fn::ImportValue:
                Fn::Sub: "${Route53DNSStack}-DomainName"
      Type: "A"
      AliasTarget:
        HostedZoneId: !GetAtt ApiGatewayDomain.RegionalHostedZoneId
        DNSName: !GetAtt ApiGatewayDomain.RegionalDomainName
        EvaluateTargetHealth: false

  ###############################################
  # API Gateway Resources
  ###############################################

  TestMethodResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      RestApiId: !Ref ApiGateway
      PathPart: "test"

  RestrictedTestResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref TestMethodResource
      RestApiId: !Ref ApiGateway
      PathPart: "restrictedGreating"

  RestrictedTestResourceMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      ResourceId: !Ref RestrictedTestResource
      RestApiId: !Ref ApiGateway
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref ApiGatewayAuthorizer
      RequestParameters: {}
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Content-Type: true
      Integration:
        Type: "MOCK"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Content-Type: "'application/json'"
            ResponseTemplates:
              "application/json": '{ "message": "Hello! You were successfully authenticated." }'

  AnnonymousTestResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref TestMethodResource
      RestApiId: !Ref ApiGateway
      PathPart: "annoynousGreating"

  AnnonymousTestResourceMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      ResourceId: !Ref AnnonymousTestResource
      RestApiId: !Ref ApiGateway
      AuthorizationType: "None"
      RequestParameters: {}
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Content-Type: true
      Integration:
        Type: "MOCK"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Content-Type: "'application/json'"
            ResponseTemplates:
              "application/json": '{ "message": "Hello! You are not authenticated, but you are able to access this endpoint." }'

  ###############################################
  # API Gateway Deployment
  ###############################################

  Deployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGateway
      Description: first deployment, deploy test endpoints
    DependsOn:
      - RestrictedTestResourceMethod
      - AnnonymousTestResourceMethod

  DevStage:
    Type: "AWS::ApiGateway::Stage"
    Properties:
      RestApiId: !Ref ApiGateway
      DeploymentId: !Ref Deployment
      StageName: "dev"
      Description: "dev stage"
      MethodSettings:
        - HttpMethod: "*"
          ResourcePath: "/*"
          LoggingLevel: INFO
          DataTraceEnabled: false
          MetricsEnabled: false
          ThrottlingBurstLimit: 100
          ThrottlingRateLimit: 100
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        Format: $context.extendedRequestId $context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId

  MyApiMapping:
    Type: "AWS::ApiGatewayV2::ApiMapping"
    Properties:
      DomainName:
        Fn::Sub:
          - "service.${DomainName}"
          - DomainName:
              Fn::ImportValue:
                Fn::Sub: "${Route53DNSStack}-DomainName"
      ApiId: !Ref ApiGateway
      Stage: !Ref DevStage

Outputs:
  ApiGateway:
    Description: Root resource of API Gateway
    Value: !Ref ApiGateway
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-ApiGateway"
  ApiGatewayRootResourceId:
    Description: Root resource of API Gateway
    Value: !GetAtt ApiGateway.RootResourceId
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-ApiGatewayRootResourceId"
  ApiGatewayRestApiId:
    Description: REST API of API Gateway
    Value: !GetAtt ApiGateway.RestApiId
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-ApiGatewayRestApiId"
  TestEndpoint:
    Description: RESTful annoymous test endpoint
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/dev/test/annoynousGreating"
  RestrictedTestEndpoint:
    Description: RESTful restricted test endpoint
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/dev/test/restrictedGreating"
