AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template to create a API Gateway

Parameters:
  CognitoStack:
    Type: String
    Description: stack name
  Route53DNSStack:
    Type: String
    Description: stack name
  ApiGatewayName:
    Type: String
    Description: API Gateway name
  AmazonAPIGatewayPushToCloudWatchLogs:
    Type: String
    Description: IAM Policy grant API Gateway permission to read and write logs to CloudWatch

Resources:
  ###############################################
  # API Gateway
  ###############################################

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    DependsOn: ApiGatewayAccount
    Properties:
      Name: !Ref ApiGatewayName

  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoAuthorizer
      Type: COGNITO_USER_POOLS
      RestApiId: !Ref ApiGateway
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - Fn::ImportValue: !Sub "${CognitoStack}-CognitoUserPoolArn"

  ###############################################
  # API Gateway Logging
  ###############################################

  # https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html

  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName:
        Fn::Join:
          - "-"
          - - !Ref ApiGateway
            - access-logs
      RetentionInDays: 1

  ApiGatewayAccessCloudWatchRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Ref AmazonAPIGatewayPushToCloudWatchLogs

  ApiGatewayAccount:
    Type: "AWS::ApiGateway::Account"
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayAccessCloudWatchRole.Arn

  ###############################################
  # Custom Domain
  ###############################################

  # https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-regional-api-custom-domain-create.html

  ApiGatewayDomain:
    Type: "AWS::ApiGateway::DomainName"
    Properties:
      DomainName:
        Fn::ImportValue: !Sub "${Route53DNSStack}-ServiceDomainName"
      RegionalCertificateArn: !Ref RegionalCertificate
      EndpointConfiguration:
        Types:
          - REGIONAL
      SecurityPolicy: "TLS_1_2"

  RegionalCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName:
        Fn::ImportValue: !Sub "${Route53DNSStack}-ServiceDomainName"
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName:
            Fn::ImportValue: !Sub "${Route53DNSStack}-ServiceDomainName"
          HostedZoneId:
            Fn::ImportValue: !Sub "${Route53DNSStack}-HostedZoneId"
      Tags:
        - Key: "Purpose"
          Value: "Asm3"

  ServiceAliasRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      HostedZoneId:
        Fn::ImportValue: !Sub "${Route53DNSStack}-HostedZoneId"
      Name:
        Fn::ImportValue: !Sub "${Route53DNSStack}-ServiceDomainName"
      Type: "A"
      AliasTarget:
        HostedZoneId: !GetAtt ApiGatewayDomain.RegionalHostedZoneId
        DNSName: !GetAtt ApiGatewayDomain.RegionalDomainName
        EvaluateTargetHealth: false

Outputs:
  ApiGatewayId:
    Description: API Gateway ID
    Value: !GetAtt ApiGateway.RestApiId
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-ApiGatewayId"
  ApiGatewayRootResourceId:
    Description: Root resource of API Gateway
    Value: !GetAtt ApiGateway.RootResourceId
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-ApiGatewayRootResourceId"
  ApiGatewayAuthorizerId:
    Description: API Gateway Authorizer ID
    Value: !GetAtt ApiGatewayAuthorizer.AuthorizerId
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-ApiGatewayAuthorizerId"
  ApiGatewayLogGroupArn:
    Description: API Gateway LogGroup ARN
    Value: !GetAtt ApiGatewayLogGroup.Arn
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-ApiGatewayLogGroupArn"
