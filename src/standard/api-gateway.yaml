AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template to create a API Gateway

Parameters:
  CognitoStack:
    Type: String
    Description: stack name
  Route53DNSStack:
    Type: String
    Description: stack name
  ApiGatewayName:
    Type: String
    Description: API Gateway name

Resources:
  ###############################################
  # API Gateway
  ###############################################

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref ApiGatewayName

  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoAuthorizer
      Type: COGNITO_USER_POOLS
      RestApiId: !Ref ApiGateway
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - Fn::ImportValue: !Sub "${CognitoStack}-CognitoUserPoolArn"

  # Deployment:
  #   Type: AWS::ApiGatewayV2::Deployment
  #   Properties:
  #     ApiId: !Ref ApiGateway
  #   DependsOn:
  #     - MyRestrictedTestMethodOnResource
  #     - MyTestMethodOnResource

  DevStage:
    Type: "AWS::ApiGatewayV2::Stage"
    Properties:
      ApiId: !Ref ApiGateway
      AutoDeploy: true
      # DeploymentId: !Ref Deployment
      StageName: "dev"
      Description: "dev stage"
      DefaultRouteSettings:
        LoggingLevel: INFO
        DataTraceEnabled: false
        DetailedMetricsEnabled: false
        ThrottlingBurstLimit: 100
        ThrottlingRateLimit: 100

  ###############################################
  # Custom Domain
  ###############################################

  ApiGatewayDomain:
    Type: "AWS::ApiGatewayV2::DomainName"
    Properties:
      DomainName:
        Fn::Sub:
          - "service.${DomainName}"
          - DomainName:
              Fn::ImportValue:
                Fn::Sub: "${Route53DNSStack}-DomainName"
      DomainNameConfigurations:
        - EndpointType: REGIONAL
          CertificateArn: !Ref RegionalCertificate
          SecurityPolicy: "TLS_1_2"

  MyApiMapping:
    Type: "AWS::ApiGatewayV2::ApiMapping"
    Properties:
      DomainName:
        Fn::Sub:
          - "service.${DomainName}"
          - DomainName:
              Fn::ImportValue:
                Fn::Sub: "${Route53DNSStack}-DomainName"
      ApiId: !Ref ApiGateway
      Stage: !Ref DevStage

  RegionalCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName:
        Fn::Sub:
          - "service.${DomainName}"
          - DomainName:
              Fn::ImportValue:
                Fn::Sub: "${Route53DNSStack}-DomainName"
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName:
            Fn::Sub:
              - "service.${DomainName}"
              - DomainName:
                  Fn::ImportValue:
                    Fn::Sub: "${Route53DNSStack}-DomainName"
          HostedZoneId:
            Fn::ImportValue: !Sub "${Route53DNSStack}-HostedZoneId"
      Tags:
        - Key: "Purpose"
          Value: "Asm3"

  MyAliasRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      HostedZoneId:
        Fn::ImportValue: !Sub "${Route53DNSStack}-HostedZoneId"
      Name:
        Fn::Sub:
          - "service.${DomainName}"
          - DomainName:
              Fn::ImportValue:
                Fn::Sub: "${Route53DNSStack}-DomainName"
      Type: "A"
      AliasTarget:
        HostedZoneId: !GetAtt ApiGatewayDomain.RegionalHostedZoneId
        DNSName: !GetAtt ApiGatewayDomain.RegionalDomainName
        EvaluateTargetHealth: false

  ###############################################
  # API Gateway Resources
  ###############################################

  MyRestrictedTestMethodResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      RestApiId: !Ref ApiGateway
      PathPart: "restrictedTest"

  MyRestrictedTestMethodOnResource:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      ResourceId: !Ref MyRestrictedTestMethodResource
      RestApiId: !Ref ApiGateway
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref ApiGatewayAuthorizer
      RequestParameters: {}
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Content-Type: true
      Integration:
        Type: "MOCK"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Content-Type: "'application/json'"
            ResponseTemplates:
              "application/json": '{ "message": "Hello! You were successfully authenticated." }'

  MyTestMethodResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      RestApiId: !Ref ApiGateway
      PathPart: "test"

  MyTestMethodOnResource:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: GET
      ResourceId: !Ref MyTestMethodResource
      RestApiId: !Ref ApiGateway
      AuthorizationType: "None"
      RequestParameters: {}
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Content-Type: true
      Integration:
        Type: "MOCK"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Content-Type: "'application/json'"
            ResponseTemplates:
              "application/json": '{ "message": "Hello! You are not authenticated, but you are able to access this endpoint." }'

Outputs:
  ApiGatewayRootResourceId:
    Description: Root resource of API Gateway
    Value: !GetAtt ApiGateway.RootResourceId
  ApiGatewayRestApiId:
    Description: REST API of API Gateway
    Value: !GetAtt ApiGateway.RestApiId
  TestEndpoint:
    Description: RESTful /test endpoint
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/dev/test"
  RestrictedTestEndpoint:
    Description: RESTful /restrictedTest endpoint
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/dev/restrictedTest"
