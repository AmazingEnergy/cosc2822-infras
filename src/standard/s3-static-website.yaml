AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template to create a S3 Bucket host a static website.

Parameters:
  StaticWebsiteBucketName:
    Type: String
    Description: name of S3 bucket

Resources:
  StaticWebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref StaticWebsiteBucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: false
        IgnorePublicAcls: true
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
            AllowedOrigins:
              - "*"
            ExposedHeaders:
              - Date
            Id: myCORSRuleId1
            MaxAge: 3600
      Tags:
        - Key: "Purpose"
          Value: "Test"
        - Key: "Name"
          Value: "static-website-bucket"

  S3BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref StaticWebsiteBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: Allow
            Principal: "*"
            Resource: !Sub "arn:${AWS::Partition}:s3:::${StaticWebsiteBucket}/*"

  MyLoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred

  MyCFDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt StaticWebsiteBucket.DomainName
            Id: S3OriginId
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
              OriginSSLProtocols:
                - TLSv1.2
                - TLSv1.1
        Enabled: "true"
        Comment: MY CloudFront distribution
        DefaultRootObject: index.html
        Logging:
          IncludeCookies: "false"
          Bucket: !GetAtt MyLoggingBucket.DomainName
          Prefix: cloudfront
        Aliases:
          - !Ref StaticWebsiteBucketName
        DefaultCacheBehavior:
          Compress: "true"
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          TargetOriginId: S3OriginId
          CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6"
          OriginRequestPolicyId: "88a5eaf4-2fd4-4709-b370-b4c650ea3fcf"
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_200
        ViewerCertificate:
          CloudFrontDefaultCertificate: "true"

Outputs:
  S3BucketWebsiteURL:
    Value: !GetAtt StaticWebsiteBucket.WebsiteURL
    Description: URL for a static website hosted on S3
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-S3BucketWebsiteURL"
  S3BucketDomaiName:
    Value: !GetAtt StaticWebsiteBucket.DomainName
    Description: URL for a static website hosted on S3
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-DomainName"
  S3BucketRegionalDomainName:
    Value: !GetAtt StaticWebsiteBucket.RegionalDomainName
    Description: URL for a static website hosted on S3
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-S3BucketRegionalDomainName"
  S3BucketSecureURL:
    Value: !Sub "https://${StaticWebsiteBucket.DomainName}"
    Description: Secure URL of S3 bucket to hold static website content
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-S3BucketSecureURL"
  S3BucketName:
    Value:
      Fn::Select:
        - 0
        - Fn::Split:
            [".s3.amazonaws.com", !GetAtt StaticWebsiteBucket.DomainName]
    Description: Name of S3 bucket to hold static website content
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-S3BucketName"
  MyCFDistributionId:
    Value: !GetAtt MyCFDistribution.Id
    Description: Id of CloudFront distribution
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-MyCFDistributionId"
  MyCFDistributionDomainName:
    Value: !GetAtt MyCFDistribution.DomainName
    Description: Domain name of CloudFront distribution
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-MyCFDistributionDomainName"
